plugins {
    id 'application'
    id 'jacoco'
    id 'checkstyle'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

checkstyle {
    toolVersion = '10.10.0'
    configFile = 'config/checkstyle/cs3500-checkstyle.xml' as File
}

application {
    mainModule = 'cs3500.pa05'
    mainClass = 'cs3500.pa05.Driver'
}

// JaCoCo for code coverage
test {
    finalizedBy jacocoTestReport // generate report after code coverage test
}
jacocoTestReport {
    dependsOn test // make sure that test task run before reports are run.
}

group 'cs3500.pa05'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javafx {
    version = '20.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

    // Jackson
    implementation("com.fasterxml.jackson.core:jackson-databind:2.15.0")

    // JavaFX
    implementation('org.controlsfx:controlsfx:11.1.2')

    // JUnit
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // TestFX
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.13.2'

    // https://github.com/webcompere/system-stubs
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.12.4'
    testImplementation group: 'uk.org.webcompere', name: 'system-stubs-jupiter', version: '2.0.2'

    implementation 'org.openjfx:javafx-controls:16'
    implementation 'org.openjfx:javafx-fxml:16'
}

apply plugin: 'java'

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes("Manifest-Version": "1.0",
                "Main-Class": "cs3500.pa05.Driver")
    }
}

tasks.register('fatJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest.from jar.manifest
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

installDist{}